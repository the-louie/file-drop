#!/usr/bin/env python3
"""
File Drop - Linux CLI Tool
Upload files and screenshots from command line
"""
import sys
import os
import argparse
import subprocess
import tempfile
from pathlib import Path
from datetime import datetime

# Add lib to path
sys.path.insert(0, str(Path(__file__).parent.parent / 'lib'))
from filedrop_client import FileDropClient

# Configuration file
CONFIG_FILE = Path.home() / '.filedrop' / 'config'

def load_config():
    """Load server URL from config or prompt"""
    if CONFIG_FILE.exists():
        return CONFIG_FILE.read_text().strip()

    print("First time setup:")
    server = input("Enter server URL (e.g., https://files.example.com): ").strip()
    CONFIG_FILE.parent.mkdir(parents=True, exist_ok=True)
    CONFIG_FILE.write_text(server)
    CONFIG_FILE.chmod(0o600)
    return server

def take_screenshot_linux() -> Path:
    """Take screenshot using available tool"""
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    tmpdir = Path(tempfile.gettempdir()) / 'filedrop'
    tmpdir.mkdir(exist_ok=True)
    filepath = tmpdir / f"fd_{timestamp}.png"

    # Try different screenshot tools
    tools = [
        ['gnome-screenshot', '-a', '-f', str(filepath)],  # GNOME
        ['scrot', '-s', str(filepath)],  # Generic
        ['import', str(filepath)],  # ImageMagick
        ['maim', '-s', str(filepath)],  # maim
    ]

    for tool in tools:
        try:
            subprocess.run(tool, check=True, capture_output=True)
            if filepath.exists() and filepath.stat().st_size > 0:
                return filepath
        except (subprocess.CalledProcessError, FileNotFoundError):
            continue

    print("Error: No screenshot tool found. Install one of: gnome-screenshot, scrot, maim, imagemagick")
    return None

def progress_bar(phase, current, total):
    """Display progress bar"""
    if phase == 'checksum':
        print("Calculating checksum...", end='\r')
    elif phase == 'uploading':
        percent = (current / total) * 100
        bar_length = 40
        filled = int(bar_length * current / total)
        bar = '█' * filled + '░' * (bar_length - filled)
        print(f"Uploading: [{bar}] {percent:.1f}% ({current}/{total} chunks)", end='\r')
        if current == total:
            print()  # New line when complete
    elif phase == 'merging':
        print("Merging chunks on server...", end='\r')
    elif phase == 'file':
        print(f"Processing file {current}/{total}...", end='\r')

def copy_to_clipboard_linux(text):
    """Copy to clipboard using xclip or xsel"""
    for cmd in [['xclip', '-selection', 'clipboard'], ['xsel', '--clipboard', '--input']]:
        try:
            process = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            process.communicate(text.encode('utf-8'))
            if process.returncode == 0:
                return True
        except FileNotFoundError:
            continue
    print("Note: Install xclip or xsel for clipboard support")
    return False

def cmd_upload(args):
    """Upload files command"""
    server_url = load_config()
    try:
        client = FileDropClient(server_url)
    except ValueError as e:
        print(f"Configuration error: {e}")
        return 1

    if not client.ensure_authenticated():
        print("Authentication failed")
        return 1

    filepaths = [Path(f) for f in args.files]
    invalid = [f for f in filepaths if not f.exists()]
    if invalid:
        print(f"Error: File(s) not found: {', '.join(str(f) for f in invalid)}")
        return 1

    if len(filepaths) == 1:
        result = client.upload_file(filepaths[0], progress_callback=progress_bar)
        if result.get('success'):
            print(f"\nSuccess! URL: {result['url']}")
            copy_to_clipboard_linux(result['url'])
            return 0
        else:
            print(f"\nError: {result.get('error')}")
            return 1
    else:
        result = client.upload_multiple(filepaths, progress_callback=progress_bar)
        if result.get('success'):
            print(f"\nSuccess! Collection URL: {result['collection_url']}")
            print(f"Uploaded {result['uploaded']}/{result['total']} files")
            copy_to_clipboard_linux(result['collection_url'])
            return 0
        else:
            print(f"\nError: {result.get('error')}")
            return 1

def cmd_screenshot(args):
    """Screenshot command"""
    server_url = load_config()
    try:
        client = FileDropClient(server_url)
    except ValueError as e:
        print(f"Configuration error: {e}")
        return 1

    if not client.ensure_authenticated():
        print("Authentication failed")
        return 1

    print("Select area for screenshot...")
    screenshot_path = take_screenshot_linux()
    if not screenshot_path:
        return 1

    result = client.upload_file(screenshot_path, progress_callback=progress_bar)

    # Clean up temp file
    try:
        screenshot_path.unlink()
    except:
        pass

    if result.get('success'):
        print(f"\nSuccess! URL: {result['url']}")
        copy_to_clipboard_linux(result['url'])
        return 0
    else:
        print(f"\nError: {result.get('error')}")
        return 1

def cmd_login(args):
    """Login command"""
    server_url = load_config()
    try:
        client = FileDropClient(server_url)
    except ValueError as e:
        print(f"Configuration error: {e}")
        return 1

    username = input("Username: ")
    from getpass import getpass
    password = getpass("Password: ")

    if client.login(username, password):
        print("Login successful! Session saved.")
        return 0
    else:
        print("Login failed")
        return 1

def cmd_config(args):
    """Configure server URL"""
    if args.show:
        if CONFIG_FILE.exists():
            print(f"Server: {CONFIG_FILE.read_text().strip()}")
        else:
            print("No configuration found")
        return 0

    server = input("Enter server URL: ").strip()
    CONFIG_FILE.parent.mkdir(parents=True, exist_ok=True)
    CONFIG_FILE.write_text(server)
    CONFIG_FILE.chmod(0o600)
    print(f"Configuration saved: {server}")
    return 0

def main():
    parser = argparse.ArgumentParser(
        description='File Drop CLI',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  fd upload file.jpg                  Upload single file
  fd upload *.png                     Upload multiple files as collection
  fd screenshot                       Take and upload screenshot
  fd login                            Login and save session
  fd config                           Configure server URL
  fd config --show                    Show current configuration
        """
    )

    subparsers = parser.add_subparsers(dest='command', required=True)

    # Upload command
    upload_parser = subparsers.add_parser('upload', help='Upload file(s)')
    upload_parser.add_argument('files', nargs='+', help='File(s) to upload')

    # Screenshot command
    screenshot_parser = subparsers.add_parser('screenshot', help='Take and upload screenshot')

    # Login command
    login_parser = subparsers.add_parser('login', help='Login and save session')

    # Config command
    config_parser = subparsers.add_parser('config', help='Configure settings')
    config_parser.add_argument('--show', action='store_true', help='Show current configuration')

    args = parser.parse_args()

    commands = {
        'upload': cmd_upload,
        'screenshot': cmd_screenshot,
        'login': cmd_login,
        'config': cmd_config,
    }

    try:
        sys.exit(commands[args.command](args))
    except KeyboardInterrupt:
        print("\nCancelled")
        sys.exit(130)
    except Exception as e:
        print(f"Unexpected error: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()

